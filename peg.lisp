;; generated by paraphrase, uses esrap

(IN-PACKAGE :peg-grammar)

(ESRAP:DEFRULE pg:GRAMMAR (AND pg:SPACING (esrap:+ pg:DEFINITION) pg:SPACING pg:ENDOFFILE)
  (:DESTRUCTURE
   (SPC DEF SPC2 EOF)
   (DECLARE (IGNORE SPC EOF SPC2))
   `(PROGN ,@DEF)))

(ESRAP:DEFRULE pg:DEFINITION
               (AND pg:IDENTIFIER
                    pg:LEFTARROW
                    pg:EXPRESSION
                    pg:SPACING
                    (ESRAP:? pg:SEMANTICCODE))
  (:DESTRUCTURE
   (ID ARR E SPC CODE)
   (DECLARE (IGNORE ARR SPC))
   (IF (NULL CODE)
       `(ESRAP:DEFRULE ,(INTERN (STRING-UPCASE ID)) ,E)
     `(ESRAP:DEFRULE ,(INTERN (STRING-UPCASE ID)) ,E ,CODE))))

(ESRAP:DEFRULE pg:SEMANTICCODE (AND pg:OPENBRACE (esrap:+ pg:NOTBRACE) pg:CLOSEBRACE)
  (:DESTRUCTURE
   (LB CODE RB)
   (DECLARE (IGNORE LB RB))
   (READ-FROM-STRING (esrap:TEXT CODE))))

(ESRAP:DEFRULE pg:NOTBRACE (OR pg:UQLITERAL (AND (ESRAP:! "}") pg:CHARACTER))
  (:TEXT pg:T))

(ESRAP:DEFRULE pg:EXPRESSION (AND pg:PSEQUENCE (esrap:* pg:SLASHSEQUENCE))
  (:DESTRUCTURE (SEQ SEQS) (IF SEQS `(OR ,SEQ ,@SEQS) SEQ)))

(ESRAP:DEFRULE pg:SLASHSEQUENCE (AND pg:SLASH pg:PSEQUENCE)
  (:DESTRUCTURE (SL SEQ) (DECLARE (IGNORE SL)) SEQ))

(ESRAP:DEFRULE pg:PSEQUENCE (esrap:* pg:PREFIX)
  (:DESTRUCTURE
   (&REST PREF)
   (IF PREF
       (IF (AND (CONSP PREF) (> (LENGTH PREF) 1))
           `(AND ,@PREF)
         (FIRST PREF))
     (VALUES))))

(ESRAP:DEFRULE pg:PREFIX (AND (ESRAP:? (OR pg:PAND pg:PNOT)) pg:SUFFIX)
  (:DESTRUCTURE (PREF SUFF) (IF PREF (LIST PREF SUFF) SUFF)))

(ESRAP:DEFRULE pg:SUFFIX (AND pg:PRIMARY (ESRAP:? (OR pg:QUESTION pg:STAR pg:PLUS)))
  (:DESTRUCTURE (PRIM SUFF) (IF SUFF (LIST SUFF PRIM) PRIM)))

(ESRAP:DEFRULE pg:PRIMARY (OR pg:P1 pg:P2 pg:LITERAL pg:PCLASS pg:DOT) (:LAMBDA (X) X))

(ESRAP:DEFRULE pg:P1 (AND pg:IDENTIFIER (ESRAP:! pg:LEFTARROW))
  (:FUNCTION FIRST))

(ESRAP:DEFRULE pg:P2 (AND pg:OPENPAREN pg:EXPRESSION pg:CLOSEPAREN)
  (:FUNCTION SECOND))

(ESRAP:DEFRULE pg:IDENTIFIER pg:STRINGIDENTIFIER
  (:LAMBDA (X) (INTERN (STRING-UPCASE ))))

(ESRAP:DEFRULE pg:STRINGIDENTIFIER (AND pg:IDENTSTART (esrap:* pg:IDENTCONT) pg:SPACING)
  (:TEXT pg:T))

(ESRAP:DEFRULE pg:IDENTSTART
               (ESRAP:CHARACTER-RANGES (#\a #\z) (#\A #\Z) #\_))

(ESRAP:DEFRULE pg:IDENTCONT
               (OR pg:IDENTSTART "-" (ESRAP:CHARACTER-RANGES (#\0 #\9))))

(ESRAP:DEFRULE pg:LITERAL
               (OR (AND (ESRAP:CHARACTER-RANGES #\')
                        (esrap:* pg:NOTSINGLE)
                        (ESRAP:CHARACTER-RANGES #\')
                        pg:SPACING)
                   (AND (ESRAP:CHARACTER-RANGES #\")
                        (esrap:* NOTDOUBLE)
                        (ESRAP:CHARACTER-RANGES #\")
                        PG:SPACING))
  (:DESTRUCTURE
   (Q1 STRING Q2 SPC)
   (DECLARE (IGNORE Q1 Q2 SPC))
   (TEXT STRING)))

(ESRAP:DEFRULE pg:UQLITERAL
               (AND (ESRAP:CHARACTER-RANGES #\")
                    (esrap:* NOTDOUBLE)
                    (ESRAP:CHARACTER-RANGES #\")
                    PG:SPACING)
  (:DESTRUCTURE
   (Q1 STRING Q2 SPC)
   (DECLARE (IGNORE SPC))
   `(,Q1 ,@STRING ,Q2)))

(ESRAP:DEFRULE pg:NOTSINGLE
               (AND (ESRAP:! (ESRAP:CHARACTER-RANGES #\')) pg:PCHAR)
  (:FUNCTION SECOND))

(ESRAP:DEFRULE pg:NOTDOUBLE
               (AND (ESRAP:! (ESRAP:CHARACTER-RANGES #\")) pg:PCHAR)
  (:FUNCTION SECOND))

(ESRAP:DEFRULE pg:PCLASS (AND "[" (esrap:* NOTRB) "]" PG:SPACING)
  (:DESTRUCTURE
   (LB RANGE RB SPC)
   (DECLARE (IGNORE LB RB SPC))
   (IF (AND (CONSP RANGE)
            (OR (NOT (= 2 (LENGTH RANGE)))
                (OR (CONSP (FIRST RANGE)) (CONSP (SECOND RANGE)))))
       `(CHARACTER-RANGES ,@RANGE)
     `(CHARACTER-RANGES ,RANGE))))

(ESRAP:DEFRULE pg:NOTRB (AND (ESRAP:! "]") pg:RANGE) (:FUNCTION SECOND))

(ESRAP:DEFRULE pg:RANGE (OR pg:CHARRANGE pg:SINGLECHAR))

(ESRAP:DEFRULE pg:CHARRANGE (AND pg:PCHAR "-" pg:PCHAR)
  (:DESTRUCTURE (C1 DASH C2) (DECLARE (IGNORE DASH)) (LIST C1 C2)))

(ESRAP:DEFRULE pg:SINGLECHAR pg:PCHAR (:LAMBDA (C) C))

(ESRAP:DEFRULE pg:PCHAR (OR pg:ESCCHAR pg:NUMCHAR1 pg:NUMCHAR2 pg:ANYCHAR))

(ESRAP:DEFRULE pg:ESCCHAR
               (AND "\\"
                    (OR "n"
                        "r"
                        "t"
                        (ESRAP:CHARACTER-RANGES #\')
                        "\""
                        "["
                        "]"
                        "\\"
                        "{"
                        "}"))
  (:DESTRUCTURE
   (SL CH)
   (DECLARE (IGNORE SL))
   (LET ((C (OR (AND (CHARACTERP CH) CH) (CHAR CH 0))))
     (CASE C
       (#\n #\Newline)
       (#\r #\Return)
       (#\t #\Tab)
       (OTHERWISE C)))))

(ESRAP:DEFRULE pg:NUMCHAR1
               (AND "\\"
                    (ESRAP:CHARACTER-RANGES (#\0 #\2))
                    (ESRAP:CHARACTER-RANGES (#\0 #\7))
                    (ESRAP:CHARACTER-RANGES (#\0 #\7)))
  (:DESTRUCTURE
   (SL N1 N2 N3)
   (DECLARE (IGNORE SL))
   (CODE-CHAR (PARSE-INTEGER (CONCATENATE 'STRING N1 N2 N3) :RADIX 8))))

(ESRAP:DEFRULE pg:NUMCHAR2
               (AND "\\"
                    (ESRAP:CHARACTER-RANGES (#\0 #\7))
                    (ESRAP:? (ESRAP:CHARACTER-RANGES (#\0 #\7))))
  (:DESTRUCTURE
   (SL N1 N2)
   (DECLARE (IGNORE SL))
   (CODE-CHAR (PARSE-INTEGER (CONCATENATE 'STRING N1 N2) :RADIX 8))))

(ESRAP:DEFRULE pg:ANYCHAR (AND (ESRAP:! "\\") pg:CHARACTER)
  (:DESTRUCTURE (SL C) (DECLARE (IGNORE SL)) C))

(ESRAP:DEFRULE pg:LEFTARROW (AND "<-" PG:SPACING)
  (:lambda (list) (DECLARE (ignore list)) (VALUES)))

(ESRAP:DEFRULE pg:SLASH (AND "/" PG:SPACING)
  (:lambda (list) (DECLARE (ignore list)) (VALUES)))

(ESRAP:DEFRULE pg:PAND (AND "&" PG:SPACING)
  (:lambda (list) (DECLARE (ignore list)) 'AND))

(ESRAP:DEFRULE pg:PNOT (AND "!" PG:SPACING)
  (:lambda (list) (DECLARE (ignore list)) 'esrap:!))

(ESRAP:DEFRULE pg:QUESTION (AND "?" PG:SPACING)
  (:lambda (list) (DECLARE (ignore list)) 'esrap:?))

(ESRAP:DEFRULE pg:STAR (AND "*" PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'esrap:*))

(ESRAP:DEFRULE pg:PLUS (AND "+" PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'esrap:+))

(ESRAP:DEFRULE PG:OPENPAREN (AND "(" PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:CLOSEPAREN (AND ")" PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:OPENBRACE (AND "{" PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:CLOSEBRACE (AND "}" PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:DOT (AND "." PG:SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'pg:CHARACTER))

(ESRAP:DEFRULE PG:PG:SPACING (esrap:* (OR pg:PSPACE pg:COMMENT))
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:COMMENT
               (AND "#"
                    (esrap:* (AND (ESRAP:! pg:ENDOFLINE) pg:CHAR1))
                    (OR pg:ENDOFLINE pg:ENDOFFILE))
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:CHAR1 pg:CHARACTER (:LAMBDA (C) C))

(ESRAP:DEFRULE PG:PSPACE (OR " " "	" pg:ENDOFLINE)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:ENDOFLINE
               (OR "
"
                   "
"
                   "")
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PG:ENDOFFILE (ESRAP:! pg:CHARACTER)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
